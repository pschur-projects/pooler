/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Public } from "../../decorators/public.decorator";
import { CreatePoolQuestionArgs } from "./CreatePoolQuestionArgs";
import { UpdatePoolQuestionArgs } from "./UpdatePoolQuestionArgs";
import { DeletePoolQuestionArgs } from "./DeletePoolQuestionArgs";
import { PoolQuestionCountArgs } from "./PoolQuestionCountArgs";
import { PoolQuestionFindManyArgs } from "./PoolQuestionFindManyArgs";
import { PoolQuestionFindUniqueArgs } from "./PoolQuestionFindUniqueArgs";
import { PoolQuestion } from "./PoolQuestion";
import { AnswerFindManyArgs } from "../../answer/base/AnswerFindManyArgs";
import { Answer } from "../../answer/base/Answer";
import { Pool } from "../../pool/base/Pool";
import { PoolQuestionService } from "../poolQuestion.service";
@graphql.Resolver(() => PoolQuestion)
export class PoolQuestionResolverBase {
  constructor(protected readonly service: PoolQuestionService) {}

  async _poolQuestionsMeta(
    @graphql.Args() args: PoolQuestionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PoolQuestion])
  async poolQuestions(
    @graphql.Args() args: PoolQuestionFindManyArgs
  ): Promise<PoolQuestion[]> {
    return this.service.findMany(args);
  }

  @Public()
  @graphql.Query(() => PoolQuestion, { nullable: true })
  async poolQuestion(
    @graphql.Args() args: PoolQuestionFindUniqueArgs
  ): Promise<PoolQuestion | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PoolQuestion)
  async createPoolQuestion(
    @graphql.Args() args: CreatePoolQuestionArgs
  ): Promise<PoolQuestion> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        pool: args.data.pool
          ? {
              connect: args.data.pool,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PoolQuestion)
  async updatePoolQuestion(
    @graphql.Args() args: UpdatePoolQuestionArgs
  ): Promise<PoolQuestion | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          pool: args.data.pool
            ? {
                connect: args.data.pool,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PoolQuestion)
  async deletePoolQuestion(
    @graphql.Args() args: DeletePoolQuestionArgs
  ): Promise<PoolQuestion | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Answer], { name: "antworten" })
  async resolveFieldAntworten(
    @graphql.Parent() parent: PoolQuestion,
    @graphql.Args() args: AnswerFindManyArgs
  ): Promise<Answer[]> {
    const results = await this.service.findAntworten(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @Public()
  @graphql.ResolveField(() => Pool, {
    nullable: true,
    name: "pool",
  })
  async resolveFieldPool(
    @graphql.Parent() parent: PoolQuestion
  ): Promise<Pool | null> {
    const result = await this.service.getPool(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
